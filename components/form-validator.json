{
  "title": "Form Validator",
  "description": "Einfache Formular-Validierung mit Fehlermeldungen",
  "type": "js",
  "group": "utilities",
  "content": "// Formular Validator Klasse\nclass FormValidator {\n  constructor(formSelector) {\n    this.form = document.querySelector(formSelector);\n    this.rules = {};\n    this.errors = {};\n    \n    if (this.form) {\n      this.init();\n    }\n  }\n\n  // Validierungsregeln hinzufügen\n  addRule(fieldName, rule, message) {\n    if (!this.rules[fieldName]) {\n      this.rules[fieldName] = [];\n    }\n    this.rules[fieldName].push({ rule, message });\n    return this;\n  }\n\n  // Initialisierung\n  init() {\n    this.form.addEventListener('submit', (e) => {\n      e.preventDefault();\n      this.validate();\n    });\n\n    // Live Validierung\n    this.form.addEventListener('input', (e) => {\n      this.validateField(e.target.name);\n    });\n  }\n\n  // Einzelnes Feld validieren\n  validateField(fieldName) {\n    const field = this.form.querySelector(`[name=\"${fieldName}\"]`);\n    const rules = this.rules[fieldName] || [];\n    \n    this.errors[fieldName] = [];\n\n    rules.forEach(({ rule, message }) => {\n      if (!rule(field.value, field)) {\n        this.errors[fieldName].push(message);\n      }\n    });\n\n    this.displayErrors(fieldName);\n    return this.errors[fieldName].length === 0;\n  }\n\n  // Alle Felder validieren\n  validate() {\n    let isValid = true;\n    \n    Object.keys(this.rules).forEach(fieldName => {\n      if (!this.validateField(fieldName)) {\n        isValid = false;\n      }\n    });\n\n    if (isValid) {\n      this.onSuccess();\n    }\n    \n    return isValid;\n  }\n\n  // Fehler anzeigen\n  displayErrors(fieldName) {\n    const field = this.form.querySelector(`[name=\"${fieldName}\"]`);\n    const errorContainer = field.parentNode.querySelector('.error-message');\n    \n    if (errorContainer) {\n      errorContainer.remove();\n    }\n\n    if (this.errors[fieldName].length > 0) {\n      const errorDiv = document.createElement('div');\n      errorDiv.className = 'error-message';\n      errorDiv.textContent = this.errors[fieldName][0];\n      field.parentNode.appendChild(errorDiv);\n      field.classList.add('error');\n    } else {\n      field.classList.remove('error');\n    }\n  }\n\n  // Erfolg Callback\n  onSuccess() {\n    console.log('✅ Formular erfolgreich validiert!');\n    // Hier kann das Formular gesendet werden\n  }\n}\n\n// Verwendungsbeispiel:\n// const validator = new FormValidator('#myForm')\n//   .addRule('email', (value) => /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value), 'Gültige E-Mail eingeben')\n//   .addRule('password', (value) => value.length >= 8, 'Passwort muss mindestens 8 Zeichen haben');"
}